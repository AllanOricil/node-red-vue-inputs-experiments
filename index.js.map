{
  "version": 3,
  "sources": ["src/core/server/decorators.ts", "src/core/server/node.ts", "src/core/schemas/message.ts", "src/core/constants.ts", "src/core/schemas/typed-input.ts", "src/nodes/your-node/schemas.ts", "src/nodes/your-node/server/index.ts", "src/core/server/config-node.ts", "src/nodes/remote-server/schemas.ts", "src/nodes/remote-server/server/index.ts", "src/server.ts", "src/core/server/index.ts", "src/core/utils.ts", "src/core/validator-service.ts", "src/core/server/validator.ts"],
  "sourcesContent": ["import { AnySchema } from \"ajv\";\n\ntype NodeOptions = {\n  validation?: {\n    configs: AnySchema;\n    credentials: AnySchema;\n    input: AnySchema;\n    outputs: AnySchema;\n  };\n};\n\nfunction node(options: NodeOptions) {\n  return function <T extends { new (...args: any[]): {} }>(constructor: T) {\n    return class extends constructor {\n      static __nodeProperties___: NodeOptions = options;\n    };\n  };\n}\n\nexport { node };\n", "import { Static } from \"@sinclair/typebox\";\nimport MessageSchema from \"../schemas/message\";\n\ntype SendFunction<T> = (data: T | T[]) => void;\ntype InputDoneFunction = (error?: Error) => void;\ntype CloseDoneFunction = () => void;\n\ntype Message = Static<typeof MessageSchema>;\n\nabstract class Node<\n  TConfigs = any,\n  TCredentials = any,\n  TInputMessage = Message,\n  TOutputMessage = Message | Message[] | (Message | null)[],\n> {\n  static readonly RED: any;\n\n  public readonly id: string;\n  public readonly type: string;\n  public readonly name: string;\n  public readonly wires: string[][];\n  public readonly x?: number;\n  public readonly y?: number;\n  public readonly z?: string;\n  public readonly g?: string;\n  public readonly configs: TConfigs;\n  public readonly credentials?: TCredentials;\n\n  constructor(configs: TConfigs) {\n    Node.RED.nodes.createNode(this, configs);\n    this.configs = configs;\n    this.x = configs.x;\n    this.y = configs.y;\n    this.z = configs.z;\n    this.g = configs.g;\n  }\n\n  static init(): void | Promise<void> {\n    console.log(\"not implemented\");\n  }\n\n  abstract onInput(\n    msg: TInputMessage,\n    send: SendFunction<TOutputMessage>,\n    done: InputDoneFunction\n  ): void | Promise<void>;\n\n  abstract onClose(\n    removed: boolean,\n    done: CloseDoneFunction\n  ): void | Promise<void>;\n\n  static getNode<T>(id: string): T | undefined {\n    return this.RED.nodes.getNode(id) as T;\n  }\n}\n\nexport { Node, SendFunction, InputDoneFunction, CloseDoneFunction };\n", "import { Type } from \"@sinclair/typebox\";\n\nexport default Type.Object({\n  payload: Type.Optional(Type.String()),\n  topic: Type.Optional(Type.String()),\n  _msgid: Type.Optional(Type.String()),\n});\n", "const TYPED_INPUT_TYPES = [\n  \"msg\",\n  \"flow\",\n  \"global\",\n  \"str\",\n  \"num\",\n  \"bool\",\n  \"json\",\n  \"bin\",\n  \"re\",\n  \"jsonata\",\n  \"date\",\n  \"env\",\n  \"node\",\n  \"cred\",\n];\n\nexport { TYPED_INPUT_TYPES };\n", "import { Type, Static } from \"@sinclair/typebox\";\nimport { TYPED_INPUT_TYPES } from \"../constants\";\n\nconst TypedInputTypeLiterals = TYPED_INPUT_TYPES.map((type) =>\n  Type.Literal(type)\n) as const;\n\nexport default Type.Object(\n  {\n    value: Type.Union(\n      [Type.String(), Type.Number(), Type.Boolean(), Type.Null()],\n      {\n        description: \"The actual value entered or selected.\",\n        default: \"\",\n      }\n    ),\n    type: Type.Union(TypedInputTypeLiterals, {\n      description:\n        \"The type of the value (string, number, message property, etc.)\",\n      default: \"str\",\n    }),\n  },\n  {\n    description: \"Represents a Node-RED TypedInput value and its type.\",\n    default: {},\n  }\n);\n", "import { Type, Static } from \"@sinclair/typebox\";\nimport MessageSchema from \"../../core/schemas/message\";\nimport TypedInputSchema from \"../../core/schemas/typed-input\";\n\nconst ConfigsSchema = Type.Object(\n  {\n    name: Type.String({ default: \"your-node\" }),\n    myProperty: TypedInputSchema,\n    myProperty2: TypedInputSchema,\n    remoteServer: Type.String({ nodeType: \"remote-server\" }),\n    anotherRemoteServer: Type.Optional(\n      Type.String({ nodeType: \"remote-server\" })\n    ),\n    country: Type.String({ default: \"brazil\" }),\n    fruit: Type.Array(Type.String(), { default: [\"apple\", \"melon\"] }),\n    number: Type.String({ default: \"1\" }),\n    object: Type.Array(Type.String(), {\n      default: [JSON.stringify({ test: \"a\" }), JSON.stringify({ test: \"b\" })],\n    }),\n    array: Type.String({\n      default: '[\"a\"]',\n    }),\n    jsontest: Type.String({ default: \"\" }),\n    csstest: Type.String({ default: \"\" }),\n  },\n  {\n    $id: \"YourNodeConfigsSchema\",\n  }\n);\n\nconst CredentialsSchema = Type.Object(\n  {\n    password: Type.Optional(\n      Type.String({\n        default: \"\",\n        minLength: 8,\n        maxLength: 20,\n        pattern: /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]+$/.source,\n        format: \"password\",\n      })\n    ),\n    password2: Type.Optional(\n      Type.String({\n        default: \"\",\n        pattern:\n          /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/\n            .source,\n        format: \"password\",\n      })\n    ),\n    username: Type.Optional(\n      Type.String({ default: \"\", maxLength: 10, minLength: 5 })\n    ),\n  },\n  {\n    $id: \"YourNodeCredentialsSchema\",\n  }\n);\n\nconst InputMessageSchema = Type.Intersect(\n  [\n    MessageSchema,\n    Type.Object({\n      myVariable: Type.Optional(Type.String()),\n    }),\n  ],\n  {\n    $id: \"YourNodeInputMessageSchema\",\n  }\n);\n\nconst OutputMessageSchema = Type.Intersect(\n  [\n    MessageSchema,\n    Type.Object({\n      originalType: Type.Union([\n        Type.Literal(\"string\"),\n        Type.Literal(\"number\"),\n      ]),\n      processedTime: Type.Number(),\n    }),\n    Type.Unknown(),\n  ],\n  { $id: \"YourNodeOutputMessageSchema\" }\n);\n\nexport {\n  ConfigsSchema,\n  CredentialsSchema,\n  InputMessageSchema,\n  OutputMessageSchema,\n};\n", "\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst decorators_1 = require(\"../../../core/server/decorators\");\nconst node_1 = require(\"../../../core/server/node\");\nconst schemas_1 = require(\"../schemas\");\nlet YourNode = class YourNode extends node_1.Node {\n    static async init() {\n        console.log(\"testing your node init\");\n    }\n    async onInput(msg, send, done) {\n        console.log(this);\n        console.log(msg);\n        const server = node_1.Node.getNode(this.configs.remoteServer);\n        console.log(server?.users);\n    }\n    async onClose(removed, done) {\n        console.log(\"removing node\");\n        done();\n    }\n};\nYourNode = __decorate([\n    (0, decorators_1.node)({\n        validation: {\n            configs: schemas_1.ConfigsSchema,\n            credentials: schemas_1.CredentialsSchema,\n            input: schemas_1.InputMessageSchema,\n            outputs: schemas_1.OutputMessageSchema,\n        },\n    })\n], YourNode);\nexports.default = YourNode;\n", "import { Static } from \"@sinclair/typebox\";\n\nabstract class ConfigNode<TConfigs = any, TCredentials = any> {\n  static readonly RED: any;\n\n  public readonly id: string;\n  public readonly type: string;\n  public readonly name: string;\n  public readonly users: string[];\n\n  public readonly configs: TConfigs;\n  public readonly credentials?: TCredentials;\n\n  constructor(configs: TConfigs) {\n    ConfigNode.RED.nodes.createNode(this, configs);\n    this.configs = configs;\n    this.users = configs._users;\n    this.z = configs.z;\n    this.g = configs.g;\n  }\n\n  static init(): void | Promise<void> {\n    console.log(\"not implemented\");\n  }\n\n  static getNode<T>(id: string): T | undefined {\n    return this.RED.nodes.getNode(id) as T;\n  }\n}\n\nexport { ConfigNode };\n", "import { Type } from \"@sinclair/typebox\";\n\nconst ConfigsSchema = Type.Object(\n  {\n    name: Type.String({ default: \"remote-server\", minLength: 10 }),\n    host: Type.String({ default: \"localhost\" }),\n  },\n  {\n    $id: \"RemoteServerConfigsSchema\",\n  }\n);\n\nexport { ConfigsSchema };\n", "\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst decorators_1 = require(\"../../../core/server/decorators\");\nconst config_node_1 = require(\"../../../core/server/config-node\");\nconst schemas_1 = require(\"../schemas\");\nlet RemoteServerConfigNode = class RemoteServerConfigNode extends config_node_1.ConfigNode {\n    // NOTE: run only once when node type is registered\n    static init() {\n        console.log(\"server-node\");\n    }\n};\nRemoteServerConfigNode = __decorate([\n    (0, decorators_1.node)({\n        validation: {\n            configs: schemas_1.ConfigsSchema,\n        },\n    })\n], RemoteServerConfigNode);\nexports.default = RemoteServerConfigNode;\n", "// NOTE: this will be generated by nrg using a template\nimport YourNode from \"./nodes/your-node/server\";\nimport RemoteServerConfigNode from \"./nodes/remote-server/server\";\nimport { registerType } from \"./core/server\";\n\n// TODO: define RED type\nexport default async function (RED: any) {\n  try {\n    // TODO: the order nodes are registered will be defined in nrg.config.ts. If not provided, it will be registered alphabetically based on the folder names\n    // TODO: investigate if it is possible to run Khan's algorithm to determine the registration order\n    await registerType(RED, \"remote-server\", RemoteServerConfigNode);\n    await registerType(RED, \"your-node\", YourNode);\n\n    // TODO: add the order in the message\n    console.log(\"All node types registered in series\");\n  } catch (error) {\n    console.error(\"Error registering node types:\", error);\n  }\n}\n", "import camelCase from \"camelcase\";\nimport { merge } from \"es-toolkit\";\nimport { Node } from \"./node\";\nimport { ConfigNode } from \"./config-node\";\nimport { getDefaultsFromSchema, getCredentialsFromSchema } from \"../utils\";\nimport { Type } from \"@sinclair/typebox\";\nimport { validatorService } from \"./validator\";\n\n// TODO: define RED type\n/**\n * Registers a custom node built with the nrg framework\n * @static\n * @async\n * @param {object} RED - The Node-RED runtime API object\n * @param {(Node)} NodeClass - A node class extending Node\n * @returns {Promise<void>} A promise that resolves when the node type registration and setup are complete. It might wait for the `NodeClass.init()` promise if one is returned.\n * @throws {Error} If NodeClass does not extend `Node`\n * @throws {Error} If type is note defined\n */\nexport async function registerType(\n  RED: any,\n  type: string,\n  NodeClass: Node | ConfigNode\n) {\n  if (\n    !(NodeClass.prototype instanceof Node) &&\n    !(NodeClass.prototype instanceof ConfigNode)\n  ) {\n    throw new Error(`${NodeClass.name} must extend Node | ConfigNode class`);\n  }\n\n  if (!type) {\n    throw new Error(`type must be provided when registering the node`);\n  }\n\n  // TODO: move this somewhere else\n  if (Node.RED === undefined) {\n    Object.defineProperty(Node, \"RED\", {\n      value: RED,\n      writable: false,\n      configurable: false,\n      enumerable: false,\n    });\n  }\n\n  // TODO: move this somewhere else\n  if (ConfigNode.RED === undefined) {\n    Object.defineProperty(ConfigNode, \"RED\", {\n      value: RED,\n      writable: false,\n      configurable: false,\n      enumerable: false,\n    });\n  }\n\n  if (NodeClass.RED === undefined) {\n    Object.defineProperty(NodeClass, \"RED\", {\n      value: RED,\n      writable: false,\n      configurable: false,\n      enumerable: false,\n    });\n  }\n\n  if (NodeClass.type === undefined) {\n    Object.defineProperty(NodeClass, \"type\", {\n      value: type,\n      writable: false,\n      configurable: false,\n      enumerable: false,\n    });\n  }\n\n  console.log(\"NodeClass\");\n  console.log(NodeClass);\n  if (typeof NodeClass.init === \"function\") {\n    const result = NodeClass.init();\n\n    if (result instanceof Promise) {\n      await result;\n    }\n  }\n\n  // NOTE: this preserves the original class name\n  const classRegistry = {};\n  classRegistry[\"_NodeClass\"] = class extends NodeClass {\n    /**\n     * Creates an instance of a given node class and injects the RED object in it\n     * @param {object} configs - Configuration object for the node-red node instance.\n     */\n    constructor(configs) {\n      super(configs);\n\n      if (NodeClass.__nodeProperties___.validation?.configs) {\n        console.log(\"validating configs\");\n        console.log(this.configs);\n        console.log(this);\n        const validator = validatorService.createValidator(\n          NodeClass.__nodeProperties___.validation?.configs\n        );\n        const isConfigsValid = validator(this.configs);\n        if (!isConfigsValid) {\n          const errors = validatorService.errors(validator.errors, {\n            separator: \"\\n\",\n            dataVar: \"- configs\",\n          });\n          console.error(errors);\n        }\n      }\n\n      if (NodeClass.__nodeProperties___.validation?.credentials) {\n        console.log(\"validating credentials\");\n        const validator = validatorService.createValidator(\n          NodeClass.__nodeProperties___.validation?.credentials\n        );\n        const isCredentialsValid = validator(this.credentials);\n        if (!isCredentialsValid) {\n          const errors = validatorService.errors(validator.errors, {\n            separator: \"\\n\",\n            dataVar: \"- credentials\",\n          });\n          console.error(errors);\n        }\n      }\n\n      console.log(\"SETUP EVENT HANDLERS\");\n      this.setupEventHandlers();\n    }\n\n    /**\n     * Sets up event handlers for the node. Automatically binds methods starting with \"on\" from the base class\n     * to their corresponding events.\n     */\n    private setupEventHandlers() {\n      console.log(\"INSIDE SETUPTEVENTHANDLERS\");\n      if (this.onInput) {\n        console.log(\"REGISTERING ON INPUT\");\n        this.on(\"input\", async (msg, send, done) => {\n          try {\n            const inputSchema = NodeClass.__nodeProperties___.validation?.input;\n            if (inputSchema) {\n              console.log(\"validating message\");\n              const messageValidator =\n                validatorService.createValidator(inputSchema);\n              const isValid = messageValidator(msg);\n              if (!isValid) {\n                const errors = validatorService.errors(\n                  messageValidator.errors,\n                  {\n                    separator: \"\\n\",\n                    dataVar: \"- message\",\n                  }\n                );\n                console.error(errors);\n                return done(errors);\n              }\n            }\n\n            await Promise.resolve(this.onInput(msg, send, done));\n          } catch (error) {\n            this.error(\"Error while processing input: \" + error.message, msg);\n            done(error);\n          }\n        });\n      }\n      if (this.onClose) {\n        this.on(\"close\", this.onClose);\n      }\n    }\n  };\n\n  function defaults() {\n    const schema = NodeClass.__nodeProperties___.validation?.configs;\n    return schema ? getDefaultsFromSchema(schema) : {};\n  }\n\n  function credentials() {\n    const schema = NodeClass.__nodeProperties___.validation?.credentials;\n    return schema ? getCredentialsFromSchema(schema) : {};\n  }\n\n  RED.nodes.registerType(type, classRegistry[\"_NodeClass\"], {\n    credentials: credentials(),\n  });\n\n  RED.httpAdmin.get(`/nrg/nodes/${type}`, function (req, res) {\n    const nodeProperties =\n      { ...classRegistry[\"_NodeClass\"].__nodeProperties___ } || {};\n\n    nodeProperties.schema = Type.Object({\n      ...classRegistry[\"_NodeClass\"].__nodeProperties___.validation.configs\n        ?.properties,\n      credentials: Type.Object({\n        ...classRegistry[\"_NodeClass\"].__nodeProperties___.validation\n          .credentials?.properties,\n      }),\n    });\n    res.json(nodeProperties);\n  });\n}\n", "import { AnySchema } from \"ajv\";\nimport { Type } from \"@sinclair/typebox\";\n\nfunction getDefaultsFromSchema(schema: AnySchema): Record<string, any> {\n  const result: Record<string, any> = {};\n  const properties = schema.properties || {};\n  const requiredProps = Array.isArray(schema.required) ? schema.required : [];\n\n  console.log(\"getDefaultsFromSchema\");\n  for (const [key, value] of Object.entries(properties)) {\n    console.log(key);\n    console.log(value);\n    result[key] = {\n      required: requiredProps.includes(key),\n      value: value.default ?? \"\",\n    };\n    if (\"nodeType\" in value) {\n      result[key].type = value.nodeType;\n    }\n  }\n\n  return result;\n}\n\nfunction getCredentialsFromSchema(\n  schema: TSchema\n): Record<string, { type: string; password?: boolean }> {\n  const result: Record<string, { type: string; password?: boolean }> = {};\n  const properties = schema.properties || {};\n  const requiredProps = Array.isArray(schema.required) ? schema.required : [];\n\n  for (const [key, value] of Object.entries(properties)) {\n    console.log(value);\n    if (Array.isArray(value)) {\n    }\n    const isPassword = value.format === \"password\";\n\n    result[key] = {\n      type: isPassword ? \"password\" : \"text\",\n      required: requiredProps.includes(key),\n      value: value.default ?? \"\",\n    };\n  }\n\n  return result;\n}\n\nfunction extendPatternWithPWD(pattern: string): string {\n  const original = new RegExp(`^${pattern}$`);\n  const pwd = /^__PWD__$/;\n  const combined = new RegExp(`(?:${original.source}|${pwd.source})`);\n  return combined.source;\n}\n\nfunction patchPasswordPatterns(schema: TSchema): void {\n  if (!(\"properties\" in schema)) return;\n\n  const props = (schema as any).properties;\n\n  for (const [key, value] of Object.entries(props)) {\n    const prop = value as any;\n\n    if (prop.format === \"password\" && typeof prop.pattern === \"string\") {\n      prop.pattern = extendPatternWithPWD(prop.pattern);\n      prop.minLength = 0; // optional: allow \"__PWD__\"\n    }\n  }\n}\n\nexport {\n  getDefaultsFromSchema,\n  getCredentialsFromSchema,\n  patchPasswordPatterns,\n};\n", "import Ajv, { Options, ErrorObject, ErrorsTextOptions } from \"ajv\";\nimport addFormats from \"ajv-formats\";\nimport addErrors from \"ajv-errors\";\nimport TypedInputSchema from \"./schemas/typed-input\";\nimport MessageSchema from \"./schemas/message\";\n\nclass ValidatorService {\n  ajv: Ajv;\n\n  constructor(options?: Options) {\n    // console.log(\"INSIDE CONSTRUCTOR OF VALIDATOR SERVICE\");\n    this.ajv = new Ajv({\n      allErrors: true,\n      useDefaults: \"empty\",\n      verbose: true,\n      validateFormats: true,\n      strict: true,\n      coerceTypes: true,\n      ...options,\n    });\n\n    console.log(this.ajv.schemas);\n\n    // NOTE: this plugin enables users to use formats keyword\n    addFormats(this.ajv);\n\n    // NOTE; this plugin enables users to declare custom error messages\n    addErrors(this.ajv);\n\n    this.ajv.addKeyword(\"nodeType\");\n  }\n\n  createValidator(schema: AnySchema) {\n    // console.log(\"INSIDE CREATEVALIDATOR\");\n    // console.log(this.ajv.schemas);\n    return this.ajv.compile(schema);\n  }\n\n  resetCache() {\n    this.ajv.cache.clear();\n  }\n\n  errors(\n    errors?: ErrorObject[] | null | undefined,\n    options?: ErrorsTextOptions\n  ) {\n    return this.ajv.errorsText(errors, options);\n  }\n}\n\nexport { ValidatorService };\n", "import { ValidatorService } from \"../validator-service\";\n// NOTE: singleton to use ajv caching features\nconst validatorService = new ValidatorService();\n\nexport { validatorService };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAWA,SAAS,KAAK,SAAsB;AAClC,SAAO,SAAkD,aAAgB;AACvE,WAAO,cAAc,YAAY;AAAA,MAC/B,OAAO,sBAAmC;AAAA,IAC5C;AAAA,EACF;AACF;AAjBA;AAAA;AAAA;AAWS;AAAA;AAAA;;;ACXT;AAAA;AAAA;AAAA;AAAA,IASe;AATf;AAAA;AAAA;AASA,IAAe,OAAf,MAAe,MAKb;AAAA,MAdF,OAcE;AAAA;AAAA;AAAA,MACA,OAAgB;AAAA,MAEA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MAEhB,YAAY,SAAmB;AAC7B,cAAK,IAAI,MAAM,WAAW,MAAM,OAAO;AACvC,aAAK,UAAU;AACf,aAAK,IAAI,QAAQ;AACjB,aAAK,IAAI,QAAQ;AACjB,aAAK,IAAI,QAAQ;AACjB,aAAK,IAAI,QAAQ;AAAA,MACnB;AAAA,MAEA,OAAO,OAA6B;AAClC,gBAAQ,IAAI,iBAAiB;AAAA,MAC/B;AAAA,MAaA,OAAO,QAAW,IAA2B;AAC3C,eAAO,KAAK,IAAI,MAAM,QAAQ,EAAE;AAAA,MAClC;AAAA,IACF;AAAA;AAAA;;;ACvDA,oBAEO;AAFP;AAAA;AAAA;AAAA,qBAAqB;AAErB,IAAO,kBAAQ,oBAAK,OAAO;AAAA,MACzB,SAAS,oBAAK,SAAS,oBAAK,OAAO,CAAC;AAAA,MACpC,OAAO,oBAAK,SAAS,oBAAK,OAAO,CAAC;AAAA,MAClC,QAAQ,oBAAK,SAAS,oBAAK,OAAO,CAAC;AAAA,IACrC,CAAC;AAAA;AAAA;;;ACND,IAAM;AAAN;AAAA;AAAA;AAAA,IAAM,oBAAoB;AAAA,MACxB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA;AAAA;;;ACfA,IAAAA,iBAGM,wBAIC;AAPP;AAAA;AAAA;AAAA,IAAAA,kBAA6B;AAC7B;AAEA,IAAM,yBAAyB,kBAAkB;AAAA,MAAI,CAAC,SACpD,qBAAK,QAAQ,IAAI;AAAA,IACnB;AAEA,IAAO,sBAAQ,qBAAK;AAAA,MAClB;AAAA,QACE,OAAO,qBAAK;AAAA,UACV,CAAC,qBAAK,OAAO,GAAG,qBAAK,OAAO,GAAG,qBAAK,QAAQ,GAAG,qBAAK,KAAK,CAAC;AAAA,UAC1D;AAAA,YACE,aAAa;AAAA,YACb,SAAS;AAAA,UACX;AAAA,QACF;AAAA,QACA,MAAM,qBAAK,MAAM,wBAAwB;AAAA,UACvC,aACE;AAAA,UACF,SAAS;AAAA,QACX,CAAC;AAAA,MACH;AAAA,MACA;AAAA,QACE,aAAa;AAAA,QACb,SAAS,CAAC;AAAA,MACZ;AAAA,IACF;AAAA;AAAA;;;AC1BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAAC,iBAIM,eA0BA,mBA6BA,oBAYA;AAvEN;AAAA;AAAA;AAAA,IAAAA,kBAA6B;AAC7B;AACA;AAEA,IAAM,gBAAgB,qBAAK;AAAA,MACzB;AAAA,QACE,MAAM,qBAAK,OAAO,EAAE,SAAS,YAAY,CAAC;AAAA,QAC1C,YAAY;AAAA,QACZ,aAAa;AAAA,QACb,cAAc,qBAAK,OAAO,EAAE,UAAU,gBAAgB,CAAC;AAAA,QACvD,qBAAqB,qBAAK;AAAA,UACxB,qBAAK,OAAO,EAAE,UAAU,gBAAgB,CAAC;AAAA,QAC3C;AAAA,QACA,SAAS,qBAAK,OAAO,EAAE,SAAS,SAAS,CAAC;AAAA,QAC1C,OAAO,qBAAK,MAAM,qBAAK,OAAO,GAAG,EAAE,SAAS,CAAC,SAAS,OAAO,EAAE,CAAC;AAAA,QAChE,QAAQ,qBAAK,OAAO,EAAE,SAAS,IAAI,CAAC;AAAA,QACpC,QAAQ,qBAAK,MAAM,qBAAK,OAAO,GAAG;AAAA,UAChC,SAAS,CAAC,KAAK,UAAU,EAAE,MAAM,IAAI,CAAC,GAAG,KAAK,UAAU,EAAE,MAAM,IAAI,CAAC,CAAC;AAAA,QACxE,CAAC;AAAA,QACD,OAAO,qBAAK,OAAO;AAAA,UACjB,SAAS;AAAA,QACX,CAAC;AAAA,QACD,UAAU,qBAAK,OAAO,EAAE,SAAS,GAAG,CAAC;AAAA,QACrC,SAAS,qBAAK,OAAO,EAAE,SAAS,GAAG,CAAC;AAAA,MACtC;AAAA,MACA;AAAA,QACE,KAAK;AAAA,MACP;AAAA,IACF;AAEA,IAAM,oBAAoB,qBAAK;AAAA,MAC7B;AAAA,QACE,UAAU,qBAAK;AAAA,UACb,qBAAK,OAAO;AAAA,YACV,SAAS;AAAA,YACT,WAAW;AAAA,YACX,WAAW;AAAA,YACX,SAAS,sCAAsC;AAAA,YAC/C,QAAQ;AAAA,UACV,CAAC;AAAA,QACH;AAAA,QACA,WAAW,qBAAK;AAAA,UACd,qBAAK,OAAO;AAAA,YACV,SAAS;AAAA,YACT,SACE,uEACG;AAAA,YACL,QAAQ;AAAA,UACV,CAAC;AAAA,QACH;AAAA,QACA,UAAU,qBAAK;AAAA,UACb,qBAAK,OAAO,EAAE,SAAS,IAAI,WAAW,IAAI,WAAW,EAAE,CAAC;AAAA,QAC1D;AAAA,MACF;AAAA,MACA;AAAA,QACE,KAAK;AAAA,MACP;AAAA,IACF;AAEA,IAAM,qBAAqB,qBAAK;AAAA,MAC9B;AAAA,QACE;AAAA,QACA,qBAAK,OAAO;AAAA,UACV,YAAY,qBAAK,SAAS,qBAAK,OAAO,CAAC;AAAA,QACzC,CAAC;AAAA,MACH;AAAA,MACA;AAAA,QACE,KAAK;AAAA,MACP;AAAA,IACF;AAEA,IAAM,sBAAsB,qBAAK;AAAA,MAC/B;AAAA,QACE;AAAA,QACA,qBAAK,OAAO;AAAA,UACV,cAAc,qBAAK,MAAM;AAAA,YACvB,qBAAK,QAAQ,QAAQ;AAAA,YACrB,qBAAK,QAAQ,QAAQ;AAAA,UACvB,CAAC;AAAA,UACD,eAAe,qBAAK,OAAO;AAAA,QAC7B,CAAC;AAAA,QACD,qBAAK,QAAQ;AAAA,MACf;AAAA,MACA,EAAE,KAAK,8BAA8B;AAAA,IACvC;AAAA;AAAA;;;ACpFA;AAAA,wCAAAC,UAAA;AAAA;AACA,QAAI,aAAcA,YAAQA,SAAK,cAAe,SAAU,YAAY,QAAQ,KAAK,MAAM;AACnF,UAAI,IAAI,UAAU,QAAQ,IAAI,IAAI,IAAI,SAAS,SAAS,OAAO,OAAO,OAAO,yBAAyB,QAAQ,GAAG,IAAI,MAAM;AAC3H,UAAI,OAAO,YAAY,YAAY,OAAO,QAAQ,aAAa,WAAY,KAAI,QAAQ,SAAS,YAAY,QAAQ,KAAK,IAAI;AAAA,UACxH,UAAS,IAAI,WAAW,SAAS,GAAG,KAAK,GAAG,IAAK,KAAI,IAAI,WAAW,CAAC,EAAG,MAAK,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,IAAI,EAAE,QAAQ,KAAK,CAAC,IAAI,EAAE,QAAQ,GAAG,MAAM;AAChJ,aAAO,IAAI,KAAK,KAAK,OAAO,eAAe,QAAQ,KAAK,CAAC,GAAG;AAAA,IAChE;AACA,WAAO,eAAeA,UAAS,cAAc,EAAE,OAAO,KAAK,CAAC;AAC5D,QAAM,eAAe;AACrB,QAAM,SAAS;AACf,QAAM,YAAY;AAClB,QAAIC,YAAW,MAAM,iBAAiB,OAAO,KAAK;AAAA,MAXlD,OAWkD;AAAA;AAAA;AAAA,MAC9C,aAAa,OAAO;AAChB,gBAAQ,IAAI,wBAAwB;AAAA,MACxC;AAAA,MACA,MAAM,QAAQ,KAAK,MAAM,MAAM;AAC3B,gBAAQ,IAAI,IAAI;AAChB,gBAAQ,IAAI,GAAG;AACf,cAAM,SAAS,OAAO,KAAK,QAAQ,KAAK,QAAQ,YAAY;AAC5D,gBAAQ,IAAI,QAAQ,KAAK;AAAA,MAC7B;AAAA,MACA,MAAM,QAAQ,SAAS,MAAM;AACzB,gBAAQ,IAAI,eAAe;AAC3B,aAAK;AAAA,MACT;AAAA,IACJ;AACA,IAAAA,YAAW,WAAW;AAAA,OACjB,GAAG,aAAa,MAAM;AAAA,QACnB,YAAY;AAAA,UACR,SAAS,UAAU;AAAA,UACnB,aAAa,UAAU;AAAA,UACvB,OAAO,UAAU;AAAA,UACjB,SAAS,UAAU;AAAA,QACvB;AAAA,MACJ,CAAC;AAAA,IACL,GAAGA,SAAQ;AACX,IAAAD,SAAQ,UAAUC;AAAA;AAAA;;;ACpClB;AAAA;AAAA;AAAA;AAAA,IAEe;AAFf;AAAA;AAAA;AAEA,IAAe,aAAf,MAAe,YAA+C;AAAA,MAF9D,OAE8D;AAAA;AAAA;AAAA,MAC5D,OAAgB;AAAA,MAEA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MAEA;AAAA,MACA;AAAA,MAEhB,YAAY,SAAmB;AAC7B,oBAAW,IAAI,MAAM,WAAW,MAAM,OAAO;AAC7C,aAAK,UAAU;AACf,aAAK,QAAQ,QAAQ;AACrB,aAAK,IAAI,QAAQ;AACjB,aAAK,IAAI,QAAQ;AAAA,MACnB;AAAA,MAEA,OAAO,OAA6B;AAClC,gBAAQ,IAAI,iBAAiB;AAAA,MAC/B;AAAA,MAEA,OAAO,QAAW,IAA2B;AAC3C,eAAO,KAAK,IAAI,MAAM,QAAQ,EAAE;AAAA,MAClC;AAAA,IACF;AAAA;AAAA;;;AC5BA,IAAAC,mBAAA;AAAA,SAAAA,kBAAA;AAAA,uBAAAC;AAAA;AAAA,IAAAC,iBAEMD;AAFN,IAAAE,gBAAA;AAAA;AAAA;AAAA,IAAAD,kBAAqB;AAErB,IAAMD,iBAAgB,qBAAK;AAAA,MACzB;AAAA,QACE,MAAM,qBAAK,OAAO,EAAE,SAAS,iBAAiB,WAAW,GAAG,CAAC;AAAA,QAC7D,MAAM,qBAAK,OAAO,EAAE,SAAS,YAAY,CAAC;AAAA,MAC5C;AAAA,MACA;AAAA,QACE,KAAK;AAAA,MACP;AAAA,IACF;AAAA;AAAA;;;ACVA,IAAAG,kBAAA;AAAA,4CAAAC,UAAA;AAAA;AACA,QAAI,aAAcA,YAAQA,SAAK,cAAe,SAAU,YAAY,QAAQ,KAAK,MAAM;AACnF,UAAI,IAAI,UAAU,QAAQ,IAAI,IAAI,IAAI,SAAS,SAAS,OAAO,OAAO,OAAO,yBAAyB,QAAQ,GAAG,IAAI,MAAM;AAC3H,UAAI,OAAO,YAAY,YAAY,OAAO,QAAQ,aAAa,WAAY,KAAI,QAAQ,SAAS,YAAY,QAAQ,KAAK,IAAI;AAAA,UACxH,UAAS,IAAI,WAAW,SAAS,GAAG,KAAK,GAAG,IAAK,KAAI,IAAI,WAAW,CAAC,EAAG,MAAK,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,IAAI,EAAE,QAAQ,KAAK,CAAC,IAAI,EAAE,QAAQ,GAAG,MAAM;AAChJ,aAAO,IAAI,KAAK,KAAK,OAAO,eAAe,QAAQ,KAAK,CAAC,GAAG;AAAA,IAChE;AACA,WAAO,eAAeA,UAAS,cAAc,EAAE,OAAO,KAAK,CAAC;AAC5D,QAAM,eAAe;AACrB,QAAM,gBAAgB;AACtB,QAAM,YAAY;AAClB,QAAIC,0BAAyB,MAAM,+BAA+B,cAAc,WAAW;AAAA,MAX3F,OAW2F;AAAA;AAAA;AAAA;AAAA,MAEvF,OAAO,OAAO;AACV,gBAAQ,IAAI,aAAa;AAAA,MAC7B;AAAA,IACJ;AACA,IAAAA,0BAAyB,WAAW;AAAA,OAC/B,GAAG,aAAa,MAAM;AAAA,QACnB,YAAY;AAAA,UACR,SAAS,UAAU;AAAA,QACvB;AAAA,MACJ,CAAC;AAAA,IACL,GAAGA,uBAAsB;AACzB,IAAAD,SAAQ,UAAUC;AAAA;AAAA;;;ACxBlB;AAAA;AAAA;AAAA;AAAA;AACA,oBAAqB;AACrB,IAAAC,iBAAmC;;;ACAnC;AACA;;;ACAA,SAAS,sBAAsB,QAAwC;AACrE,QAAM,SAA8B,CAAC;AACrC,QAAM,aAAa,OAAO,cAAc,CAAC;AACzC,QAAM,gBAAgB,MAAM,QAAQ,OAAO,QAAQ,IAAI,OAAO,WAAW,CAAC;AAE1E,UAAQ,IAAI,uBAAuB;AACnC,aAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,UAAU,GAAG;AACrD,YAAQ,IAAI,GAAG;AACf,YAAQ,IAAI,KAAK;AACjB,WAAO,GAAG,IAAI;AAAA,MACZ,UAAU,cAAc,SAAS,GAAG;AAAA,MACpC,OAAO,MAAM,WAAW;AAAA,IAC1B;AACA,QAAI,cAAc,OAAO;AACvB,aAAO,GAAG,EAAE,OAAO,MAAM;AAAA,IAC3B;AAAA,EACF;AAEA,SAAO;AACT;AAnBS;AAqBT,SAAS,yBACP,QACsD;AACtD,QAAM,SAA+D,CAAC;AACtE,QAAM,aAAa,OAAO,cAAc,CAAC;AACzC,QAAM,gBAAgB,MAAM,QAAQ,OAAO,QAAQ,IAAI,OAAO,WAAW,CAAC;AAE1E,aAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,UAAU,GAAG;AACrD,YAAQ,IAAI,KAAK;AACjB,QAAI,MAAM,QAAQ,KAAK,GAAG;AAAA,IAC1B;AACA,UAAM,aAAa,MAAM,WAAW;AAEpC,WAAO,GAAG,IAAI;AAAA,MACZ,MAAM,aAAa,aAAa;AAAA,MAChC,UAAU,cAAc,SAAS,GAAG;AAAA,MACpC,OAAO,MAAM,WAAW;AAAA,IAC1B;AAAA,EACF;AAEA,SAAO;AACT;AArBS;;;ADnBT,IAAAC,kBAAqB;;;AELrB,iBAA6D;AAC7D,yBAAuB;AACvB,wBAAsB;AAItB,IAAM,mBAAN,MAAuB;AAAA,EANvB,OAMuB;AAAA;AAAA;AAAA,EACrB;AAAA,EAEA,YAAY,SAAmB;AAE7B,SAAK,MAAM,IAAI,WAAAC,QAAI;AAAA,MACjB,WAAW;AAAA,MACX,aAAa;AAAA,MACb,SAAS;AAAA,MACT,iBAAiB;AAAA,MACjB,QAAQ;AAAA,MACR,aAAa;AAAA,MACb,GAAG;AAAA,IACL,CAAC;AAED,YAAQ,IAAI,KAAK,IAAI,OAAO;AAG5B,2BAAAC,SAAW,KAAK,GAAG;AAGnB,0BAAAC,SAAU,KAAK,GAAG;AAElB,SAAK,IAAI,WAAW,UAAU;AAAA,EAChC;AAAA,EAEA,gBAAgB,QAAmB;AAGjC,WAAO,KAAK,IAAI,QAAQ,MAAM;AAAA,EAChC;AAAA,EAEA,aAAa;AACX,SAAK,IAAI,MAAM,MAAM;AAAA,EACvB;AAAA,EAEA,OACE,QACA,SACA;AACA,WAAO,KAAK,IAAI,WAAW,QAAQ,OAAO;AAAA,EAC5C;AACF;;;AC9CA,IAAM,mBAAmB,IAAI,iBAAiB;;;AHiB9C,eAAsB,aACpB,KACA,MACA,WACA;AACA,MACE,EAAE,UAAU,qBAAqB,SACjC,EAAE,UAAU,qBAAqB,aACjC;AACA,UAAM,IAAI,MAAM,GAAG,UAAU,IAAI,sCAAsC;AAAA,EACzE;AAEA,MAAI,CAAC,MAAM;AACT,UAAM,IAAI,MAAM,iDAAiD;AAAA,EACnE;AAGA,MAAI,KAAK,QAAQ,QAAW;AAC1B,WAAO,eAAe,MAAM,OAAO;AAAA,MACjC,OAAO;AAAA,MACP,UAAU;AAAA,MACV,cAAc;AAAA,MACd,YAAY;AAAA,IACd,CAAC;AAAA,EACH;AAGA,MAAI,WAAW,QAAQ,QAAW;AAChC,WAAO,eAAe,YAAY,OAAO;AAAA,MACvC,OAAO;AAAA,MACP,UAAU;AAAA,MACV,cAAc;AAAA,MACd,YAAY;AAAA,IACd,CAAC;AAAA,EACH;AAEA,MAAI,UAAU,QAAQ,QAAW;AAC/B,WAAO,eAAe,WAAW,OAAO;AAAA,MACtC,OAAO;AAAA,MACP,UAAU;AAAA,MACV,cAAc;AAAA,MACd,YAAY;AAAA,IACd,CAAC;AAAA,EACH;AAEA,MAAI,UAAU,SAAS,QAAW;AAChC,WAAO,eAAe,WAAW,QAAQ;AAAA,MACvC,OAAO;AAAA,MACP,UAAU;AAAA,MACV,cAAc;AAAA,MACd,YAAY;AAAA,IACd,CAAC;AAAA,EACH;AAEA,UAAQ,IAAI,WAAW;AACvB,UAAQ,IAAI,SAAS;AACrB,MAAI,OAAO,UAAU,SAAS,YAAY;AACxC,UAAM,SAAS,UAAU,KAAK;AAE9B,QAAI,kBAAkB,SAAS;AAC7B,YAAM;AAAA,IACR;AAAA,EACF;AAGA,QAAM,gBAAgB,CAAC;AACvB,gBAAc,YAAY,IAAI,cAAc,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA,IAKpD,YAAY,SAAS;AACnB,YAAM,OAAO;AAEb,UAAI,UAAU,oBAAoB,YAAY,SAAS;AACrD,gBAAQ,IAAI,oBAAoB;AAChC,gBAAQ,IAAI,KAAK,OAAO;AACxB,gBAAQ,IAAI,IAAI;AAChB,cAAM,YAAY,iBAAiB;AAAA,UACjC,UAAU,oBAAoB,YAAY;AAAA,QAC5C;AACA,cAAM,iBAAiB,UAAU,KAAK,OAAO;AAC7C,YAAI,CAAC,gBAAgB;AACnB,gBAAM,SAAS,iBAAiB,OAAO,UAAU,QAAQ;AAAA,YACvD,WAAW;AAAA,YACX,SAAS;AAAA,UACX,CAAC;AACD,kBAAQ,MAAM,MAAM;AAAA,QACtB;AAAA,MACF;AAEA,UAAI,UAAU,oBAAoB,YAAY,aAAa;AACzD,gBAAQ,IAAI,wBAAwB;AACpC,cAAM,YAAY,iBAAiB;AAAA,UACjC,UAAU,oBAAoB,YAAY;AAAA,QAC5C;AACA,cAAM,qBAAqB,UAAU,KAAK,WAAW;AACrD,YAAI,CAAC,oBAAoB;AACvB,gBAAM,SAAS,iBAAiB,OAAO,UAAU,QAAQ;AAAA,YACvD,WAAW;AAAA,YACX,SAAS;AAAA,UACX,CAAC;AACD,kBAAQ,MAAM,MAAM;AAAA,QACtB;AAAA,MACF;AAEA,cAAQ,IAAI,sBAAsB;AAClC,WAAK,mBAAmB;AAAA,IAC1B;AAAA;AAAA;AAAA;AAAA;AAAA,IAMQ,qBAAqB;AAC3B,cAAQ,IAAI,4BAA4B;AACxC,UAAI,KAAK,SAAS;AAChB,gBAAQ,IAAI,sBAAsB;AAClC,aAAK,GAAG,SAAS,OAAO,KAAK,MAAM,SAAS;AAC1C,cAAI;AACF,kBAAM,cAAc,UAAU,oBAAoB,YAAY;AAC9D,gBAAI,aAAa;AACf,sBAAQ,IAAI,oBAAoB;AAChC,oBAAM,mBACJ,iBAAiB,gBAAgB,WAAW;AAC9C,oBAAM,UAAU,iBAAiB,GAAG;AACpC,kBAAI,CAAC,SAAS;AACZ,sBAAM,SAAS,iBAAiB;AAAA,kBAC9B,iBAAiB;AAAA,kBACjB;AAAA,oBACE,WAAW;AAAA,oBACX,SAAS;AAAA,kBACX;AAAA,gBACF;AACA,wBAAQ,MAAM,MAAM;AACpB,uBAAO,KAAK,MAAM;AAAA,cACpB;AAAA,YACF;AAEA,kBAAM,QAAQ,QAAQ,KAAK,QAAQ,KAAK,MAAM,IAAI,CAAC;AAAA,UACrD,SAAS,OAAO;AACd,iBAAK,MAAM,mCAAmC,MAAM,SAAS,GAAG;AAChE,iBAAK,KAAK;AAAA,UACZ;AAAA,QACF,CAAC;AAAA,MACH;AACA,UAAI,KAAK,SAAS;AAChB,aAAK,GAAG,SAAS,KAAK,OAAO;AAAA,MAC/B;AAAA,IACF;AAAA,EACF;AAEA,WAAS,WAAW;AAClB,UAAM,SAAS,UAAU,oBAAoB,YAAY;AACzD,WAAO,SAAS,sBAAsB,MAAM,IAAI,CAAC;AAAA,EACnD;AAHS;AAKT,WAAS,cAAc;AACrB,UAAM,SAAS,UAAU,oBAAoB,YAAY;AACzD,WAAO,SAAS,yBAAyB,MAAM,IAAI,CAAC;AAAA,EACtD;AAHS;AAKT,MAAI,MAAM,aAAa,MAAM,cAAc,YAAY,GAAG;AAAA,IACxD,aAAa,YAAY;AAAA,EAC3B,CAAC;AAED,MAAI,UAAU,IAAI,cAAc,IAAI,IAAI,SAAU,KAAK,KAAK;AAC1D,UAAM,iBACJ,EAAE,GAAG,cAAc,YAAY,EAAE,oBAAoB;AAEvD,mBAAe,SAAS,qBAAK,OAAO;AAAA,MAClC,GAAG,cAAc,YAAY,EAAE,oBAAoB,WAAW,SAC1D;AAAA,MACJ,aAAa,qBAAK,OAAO;AAAA,QACvB,GAAG,cAAc,YAAY,EAAE,oBAAoB,WAChD,aAAa;AAAA,MAClB,CAAC;AAAA,IACH,CAAC;AACD,QAAI,KAAK,cAAc;AAAA,EACzB,CAAC;AACH;AApLsB;;;ADbtB,eAAO,eAAwB,KAAU;AACvC,MAAI;AAGF,UAAM,aAAa,KAAK,iBAAiB,eAAAC,OAAsB;AAC/D,UAAM,aAAa,KAAK,aAAa,cAAAC,OAAQ;AAG7C,YAAQ,IAAI,qCAAqC;AAAA,EACnD,SAAS,OAAO;AACd,YAAQ,MAAM,iCAAiC,KAAK;AAAA,EACtD;AACF;AAZO;",
  "names": ["import_typebox", "import_typebox", "exports", "YourNode", "schemas_exports", "ConfigsSchema", "import_typebox", "init_schemas", "require_server", "exports", "RemoteServerConfigNode", "import_server", "import_typebox", "Ajv", "addFormats", "addErrors", "RemoteServerConfigNode", "YourNode"]
}
