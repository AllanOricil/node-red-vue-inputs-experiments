{
  "version": 3,
  "sources": ["../src/server.ts", "../src/core/validator-service.ts", "../src/core/server/validator.ts", "../src/core/server/nodes/node.ts", "../src/core/server/nodes/io-node.ts", "../src/core/server/nodes/config-node.ts", "../src/nodes/your-node/schemas.ts", "../src/core/schemas/config-node-configs.ts", "../src/core/schemas/node-configs.ts", "../src/core/schemas/message.ts", "../src/core/schemas/io-node-configs.ts", "../src/core/schemas/typed-input.ts", "../src/core/constants.ts", "../src/nodes/your-node/server/index.ts", "../src/nodes/remote-server/schemas.ts", "../src/nodes/remote-server/server/index.ts", "../src/core/server/index.ts", "../src/core/utils.ts", "../src/index.server.ts"],
  "sourcesContent": ["// NOTE: this module is generated by nrg\nimport init from \"./index.server\";\n\n// TODO: define RED type\nexport default async function (RED: any) {\n  try {\n    console.log(\"Running provided init\");\n    await init(RED);\n    console.log(\"Finished running provided init\");\n  } catch (error) {\n    console.error(\"Error while running provided init:\", error);\n  }\n}\n", "import Ajv, {\n  Options,\n  ErrorObject,\n  ErrorsTextOptions,\n  AnySchemaObject,\n} from \"ajv\";\nimport addFormats from \"ajv-formats\";\nimport addErrors from \"ajv-errors\";\nimport { MessageSchema, TypedInputSchema } from \"./schemas\";\n\nclass ValidatorService {\n  private readonly ajv: Ajv;\n\n  constructor(options?: Options) {\n    this.ajv = new Ajv({\n      allErrors: true,\n      useDefaults: \"empty\",\n      verbose: true,\n      validateFormats: true,\n      strict: true,\n      coerceTypes: true,\n      ...options,\n    });\n\n    console.log(this.ajv.schemas);\n\n    // NOTE: this plugin enables users to use formats keyword\n    addFormats(this.ajv);\n\n    // NOTE; this plugin enables users to declare custom error messages\n    addErrors(this.ajv);\n\n    this.ajv.addKeyword(\"nodeType\");\n  }\n\n  createValidator(schema: AnySchemaObject) {\n    return this.ajv.compile(schema);\n  }\n\n  errors(\n    errors?: ErrorObject[] | null | undefined,\n    options?: ErrorsTextOptions\n  ) {\n    return this.ajv.errorsText(errors, options);\n  }\n}\n\nexport { ValidatorService };\n", "import { ValidatorService } from \"../validator-service\";\n// NOTE: singleton to use ajv caching features\nconst validatorService = new ValidatorService();\n\nexport { validatorService };\n", "import { AnySchemaObject } from \"ajv\";\nimport { Static } from \"@sinclair/typebox\";\nimport { MessageSchema, NodeConfigsSchema } from \"../../schemas\";\nimport { validatorService } from \"../validator\";\n\ntype Message = Static<typeof MessageSchema>;\ntype NodeConfigs = Static<typeof NodeConfigsSchema>;\n\ninterface ConfigNodeValidations {\n  configs: AnySchemaObject;\n  credentials?: AnySchemaObject;\n}\n\ninterface IONodeValidations {\n  configs: AnySchemaObject;\n  credentials?: AnySchemaObject;\n  input?: AnySchemaObject;\n  outputs?: AnySchemaObject;\n}\n\ntype NodeValidations = ConfigNodeValidations | IONodeValidations;\n\n// NOTE: these methods are implemented and defined by Node-RED runtime. They were added here to provide intelisense only.\ndeclare module \"./node\" {\n  interface Node<TConfigs, TCredentials> {\n    error(logMessage: string, msg: any): void;\n    debug(msg: any): void;\n    trace(msg: any): void;\n    log(msg: any): void;\n    warn(msg: any): void;\n  }\n}\n\nabstract class Node<\n  TConfigs extends NodeConfigs = NodeConfigs,\n  TCredentials = any,\n> {\n  static RED: any;\n  static type: string;\n\n  public static readonly validations: NodeValidations;\n\n  public readonly id: string;\n  public readonly type: string;\n  public readonly name: string;\n  public readonly z?: string;\n  public readonly g?: string;\n\n  public readonly configs: TConfigs;\n  public readonly credentials?: TCredentials;\n\n  constructor(configs: TConfigs) {\n    Node.RED.nodes.createNode(this, configs);\n    this.configs = configs;\n    this.id = configs.id;\n    this.type = configs.type;\n    this.name = configs.name;\n    this.z = configs.z;\n    this.g = configs.g;\n\n    if (Node.validations?.configs) {\n      console.log(\"validating configs\");\n      console.log(this.configs);\n      console.log(this);\n      const validator = validatorService.createValidator(\n        Node.validations?.configs\n      );\n      const isConfigsValid = validator(this.configs);\n      if (!isConfigsValid) {\n        const errors = validatorService.errors(validator.errors, {\n          separator: \"\\n\",\n          dataVar: \"- configs\",\n        });\n        console.error(errors);\n      }\n    }\n\n    if (Node.validations?.credentials) {\n      console.log(\"validating credentials\");\n      const validator = validatorService.createValidator(\n        Node.validations?.credentials\n      );\n      const isCredentialsValid = validator(this.credentials);\n      if (!isCredentialsValid) {\n        const errors = validatorService.errors(validator.errors, {\n          separator: \"\\n\",\n          dataVar: \"- credentials\",\n        });\n        console.error(errors);\n      }\n    }\n  }\n\n  static init(): void | Promise<void> {\n    console.log(\"not implemented\");\n  }\n\n  static getNode<T>(id: string): T | undefined {\n    return this.RED.nodes.getNode(id) as T;\n  }\n}\n\nexport {\n  ConfigNodeValidations,\n  Node,\n  NodeConfigs,\n  NodeValidations,\n  IONodeValidations,\n};\n", "import { Static } from \"@sinclair/typebox\";\nimport { AnySchemaObject } from \"ajv\";\nimport { MessageSchema, IONodeConfigsSchema } from \"../../schemas\";\nimport { validatorService } from \"../validator\";\nimport { Node, IONodeValidations } from \"./node\";\n\ntype CloseDoneFunction = () => void;\ntype InputDoneFunction = (error?: Error | string) => void;\ntype IONodeConfigs = Static<typeof IONodeConfigsSchema>;\ntype Message = Static<typeof MessageSchema>;\ntype SendFunction<T> = (data: T | T[]) => void;\ninterface ContextStore {\n  get(key: string): any;\n  set(key: string, value: any): void;\n}\n\ninterface Context {\n  flow: ContextStore;\n  global: ContextStore;\n  node: ContextStore;\n}\n\n// NOTE: these methods are implemented and defined by Node-RED runtime. They were added here to provide intelisense only.\ndeclare module \"./io-node\" {\n  interface IONode<TConfigs, TCredentials, TInputMessage, TOutputMessage> {\n    close(removed: boolean): Promise<void>;\n    context(): Context;\n    emit(event: string, ...args: any[]): void;\n    on(event: string, callback: (...args: any[]) => void): void;\n    receive(msg: Message & { [key: string]: any }): void;\n    removeAllListeners(name: string): void;\n    removeListener(name: string): void;\n    send(msg: TInputMessage): void;\n    updateWires(wires: string[][]): void;\n    metric(\n      eventName: string,\n      msg: Message & { [key: string]: any },\n      metricValue: number\n    ): boolean | void;\n    status(\n      status:\n        | { fill?: \"red\" | \"green\"; shape?: \"dot\" | \"string\"; text?: string }\n        | string\n    ): void;\n  }\n}\n\nabstract class IONode<\n  TConfigs extends IONodeConfigs = IONodeConfigs,\n  TCredentials = any,\n  TInputMessage = Message,\n  TOutputMessage = Message | Message[] | (Message | null)[],\n> extends Node<TConfigs, TCredentials> {\n  public static override readonly validations: IONodeValidations;\n\n  public readonly wires: string[][];\n  public readonly x: number;\n  public readonly y: number;\n\n  constructor(configs: TConfigs) {\n    super(configs);\n\n    this.x = configs.x;\n    this.y = configs.y;\n    this.wires = configs.wires || [[]];\n\n    console.log(\"SETUP EVENT HANDLERS\");\n    this.setupEventHandlers();\n  }\n\n  abstract onInput(\n    msg: TInputMessage,\n    send: SendFunction<TOutputMessage>,\n    done: InputDoneFunction\n  ): void | Promise<void>;\n\n  abstract onClose(\n    removed: boolean,\n    done: CloseDoneFunction\n  ): void | Promise<void>;\n\n  /**\n   * Sets up event handlers for the node. Automatically binds methods starting with \"on\" from the base class\n   * to their corresponding events.\n   */\n  private setupEventHandlers() {\n    console.log(\"INSIDE SETUPTEVENTHANDLERS\");\n    if (this.onInput) {\n      console.log(\"REGISTERING ON INPUT\");\n      this.on(\n        \"input\",\n        async (\n          msg: TInputMessage,\n          send: SendFunction<TOutputMessage>,\n          done: InputDoneFunction\n        ) => {\n          try {\n            const inputSchema = IONode.validations?.input;\n            if (inputSchema) {\n              console.log(\"validating message\");\n              const messageValidator =\n                validatorService.createValidator(inputSchema);\n              const isValid = messageValidator(msg);\n              if (!isValid) {\n                const errors = validatorService.errors(\n                  messageValidator.errors,\n                  {\n                    separator: \"\\n\",\n                    dataVar: \"- message\",\n                  }\n                );\n                console.error(errors);\n                return done(errors);\n              }\n            }\n\n            await Promise.resolve(this.onInput(msg, send, done));\n          } catch (error) {\n            if (error instanceof Error) {\n              this.error(\"Error while processing input: \" + error.message, msg);\n              done(error);\n            } else {\n              this.error(\"Unknown error occurred during input handling\", msg);\n              done(\"Unknown error occurred during input handling\");\n            }\n          }\n        }\n      );\n    }\n    if (this.onClose) {\n      this.on(\"close\", this.onClose);\n    }\n  }\n}\n\nexport {\n  CloseDoneFunction,\n  Context,\n  ContextStore,\n  InputDoneFunction,\n  IONode,\n  IONodeConfigs,\n  SendFunction,\n};\n", "import { Static } from \"@sinclair/typebox\";\nimport { AnySchemaObject } from \"ajv\";\nimport { ConfigNodeConfigsSchema } from \"../../schemas\";\nimport { Node, ConfigNodeValidations } from \"./node\";\n\ntype ConfigNodeConfigs = Static<typeof ConfigNodeConfigsSchema>;\n\nabstract class ConfigNode<\n  TConfigs extends ConfigNodeConfigs = ConfigNodeConfigs,\n  TCredentials = any,\n> extends Node<TConfigs, TCredentials> {\n  public static override readonly validations: ConfigNodeValidations;\n  public readonly users: string[];\n\n  constructor(configs: TConfigs) {\n    super(configs);\n    this.users = configs._users || [];\n  }\n}\n\nexport { ConfigNode, ConfigNodeConfigs };\n", "import { Type, Static } from \"@sinclair/typebox\";\nimport {\n  IONodeConfigsSchema,\n  TypedInputSchema,\n  MessageSchema,\n} from \"../../core/schemas\";\n\nconst ConfigsSchema = Type.Object(\n  {\n    ...IONodeConfigsSchema.properties,\n    name: Type.String({ default: \"your-node\" }),\n    myProperty: TypedInputSchema,\n    myProperty2: TypedInputSchema,\n    remoteServer: Type.String({ nodeType: \"remote-server\" }),\n    anotherRemoteServer: Type.Optional(\n      Type.String({ nodeType: \"remote-server\" })\n    ),\n    country: Type.String({ default: \"brazil\" }),\n    fruit: Type.Array(Type.String(), { default: [\"apple\", \"melon\"] }),\n    number: Type.String({ default: \"1\" }),\n    object: Type.Array(Type.String(), {\n      default: [JSON.stringify({ test: \"a\" }), JSON.stringify({ test: \"b\" })],\n    }),\n    array: Type.String({\n      default: '[\"a\"]',\n    }),\n    jsontest: Type.String({ default: \"\" }),\n    csstest: Type.String({ default: \"\" }),\n  },\n  {\n    $id: \"YourNodeConfigsSchema\",\n  }\n);\n\nconst CredentialsSchema = Type.Object(\n  {\n    password: Type.Optional(\n      Type.String({\n        default: \"\",\n        minLength: 8,\n        maxLength: 20,\n        pattern: /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]+$/.source,\n        format: \"password\",\n      })\n    ),\n    password2: Type.Optional(\n      Type.String({\n        default: \"\",\n        pattern:\n          /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/\n            .source,\n        format: \"password\",\n      })\n    ),\n    username: Type.Optional(\n      Type.String({ default: \"\", maxLength: 10, minLength: 5 })\n    ),\n  },\n  {\n    $id: \"YourNodeCredentialsSchema\",\n  }\n);\n\nconst InputMessageSchema = Type.Intersect(\n  [\n    MessageSchema,\n    Type.Object({\n      myVariable: Type.Optional(Type.String()),\n    }),\n  ],\n  {\n    $id: \"YourNodeInputMessageSchema\",\n  }\n);\n\nconst OutputMessageSchema = Type.Intersect(\n  [\n    MessageSchema,\n    Type.Object({\n      originalType: Type.Union([\n        Type.Literal(\"string\"),\n        Type.Literal(\"number\"),\n      ]),\n      processedTime: Type.Number(),\n    }),\n    Type.Unknown(),\n  ],\n  { $id: \"YourNodeOutputMessageSchema\" }\n);\n\nexport {\n  ConfigsSchema,\n  CredentialsSchema,\n  InputMessageSchema,\n  OutputMessageSchema,\n};\n", "import { Type } from \"@sinclair/typebox\";\nimport NodeConfigsSchema from \"./node-configs\";\n\nexport default Type.Object({\n  ...NodeConfigsSchema.properties,\n  _users: Type.Array(Type.String()),\n});\n", "import { Type } from \"@sinclair/typebox\";\n\nexport default Type.Object({\n  id: Type.String(),\n  type: Type.String(),\n  name: Type.String(),\n  g: Type.Optional(Type.String()),\n  z: Type.Optional(Type.String()),\n});\n", "import { Type } from \"@sinclair/typebox\";\n\nexport default Type.Object({\n  payload: Type.Optional(Type.String()),\n  topic: Type.Optional(Type.String()),\n  _msgid: Type.Optional(Type.String()),\n});\n", "import { Type } from \"@sinclair/typebox\";\nimport NodeConfigsSchema from \"./node-configs\";\n\nexport default Type.Object({\n  ...NodeConfigsSchema.properties,\n  wires: Type.Array(Type.Array(Type.String(), { default: [] }), {\n    default: [[]],\n  }),\n  x: Type.Number(),\n  y: Type.Number(),\n});\n", "import { Type, Static } from \"@sinclair/typebox\";\nimport { TYPED_INPUT_TYPES } from \"../constants\";\n\nconst TypedInputTypeLiterals = TYPED_INPUT_TYPES.map((type) =>\n  Type.Literal(type)\n);\n\nexport default Type.Object(\n  {\n    value: Type.Union(\n      [Type.String(), Type.Number(), Type.Boolean(), Type.Null()],\n      {\n        description: \"The actual value entered or selected.\",\n        default: \"\",\n      }\n    ),\n    type: Type.Union(TypedInputTypeLiterals, {\n      description:\n        \"The type of the value (string, number, message property, etc.)\",\n      default: \"str\",\n    }),\n  },\n  {\n    description: \"Represents a Node-RED TypedInput value and its type.\",\n    default: {\n      type: \"str\",\n      value: \"\",\n    },\n  }\n);\n", "const TYPED_INPUT_TYPES = [\n  \"msg\",\n  \"flow\",\n  \"global\",\n  \"str\",\n  \"num\",\n  \"bool\",\n  \"json\",\n  \"bin\",\n  \"re\",\n  \"jsonata\",\n  \"date\",\n  \"env\",\n  \"node\",\n  \"cred\",\n];\n\nexport { TYPED_INPUT_TYPES };\n", "import { Static } from \"@sinclair/typebox\";\nimport {\n  CloseDoneFunction,\n  InputDoneFunction,\n  IONode,\n  IONodeValidations,\n  SendFunction,\n} from \"../../../core/server/nodes\";\nimport RemoteServerConfigNode from \"../../remote-server/server\";\nimport {\n  ConfigsSchema,\n  CredentialsSchema,\n  InputMessageSchema,\n  OutputMessageSchema,\n} from \"../schemas\";\n\nexport type YourNodeConfigs = Static<typeof ConfigsSchema>;\nexport type YourNodeCredentials = Static<typeof CredentialsSchema>;\nexport type YourNodeInputMessage = Static<typeof InputMessageSchema>;\nexport type YourNodeOutputMessage = Static<typeof OutputMessageSchema>;\n\nexport default class YourNode extends IONode<\n  YourNodeConfigs,\n  YourNodeCredentials,\n  YourNodeInputMessage,\n  YourNodeOutputMessage\n> {\n  static override validations: IONodeValidations = {\n    configs: ConfigsSchema,\n    credentials: CredentialsSchema,\n    input: InputMessageSchema,\n    outputs: OutputMessageSchema,\n  };\n\n  static override async init() {\n    console.log(\"testing your node init\");\n  }\n\n  async onInput(\n    msg: {\n      payload?: string | undefined;\n      topic?: string | undefined;\n      _msgid?: string | undefined;\n    } & { myVariable?: string | undefined },\n    send: SendFunction<\n      {\n        payload?: string | undefined;\n        topic?: string | undefined;\n        _msgid?: string | undefined;\n      } & { originalType: \"string\" | \"number\"; processedTime: number }\n    >,\n    done: InputDoneFunction\n  ): Promise<void> {\n    console.log(this);\n    console.log(msg);\n\n    const server = IONode.getNode<RemoteServerConfigNode>(\n      this.configs.remoteServer\n    );\n\n    console.log(server?.users);\n  }\n\n  async onClose(removed: boolean, done: CloseDoneFunction): Promise<void> {\n    console.log(\"removing node\");\n    done();\n  }\n}\n", "import { Type } from \"@sinclair/typebox\";\nimport { ConfigNodeConfigsSchema } from \"../../core/schemas\";\n\nconst ConfigsSchema = Type.Object(\n  {\n    ...ConfigNodeConfigsSchema.properties,\n    name: Type.String({ default: \"remote-server\", minLength: 10 }),\n    host: Type.String({ default: \"localhost\" }),\n  },\n  {\n    $id: \"RemoteServerConfigsSchema\",\n  }\n);\n\nexport { ConfigsSchema };\n", "import { Static } from \"@sinclair/typebox\";\nimport { ConfigNode, ConfigNodeValidations } from \"../../../core/server/nodes\";\nimport { ConfigsSchema } from \"../schemas\";\n\nexport type RemoteServerConfigs = Static<typeof ConfigsSchema>;\n\nexport default class RemoteServerConfigNode extends ConfigNode<RemoteServerConfigs> {\n  static override validations: ConfigNodeValidations = {\n    configs: ConfigsSchema,\n  };\n\n  // NOTE: run only once when node type is registered\n  static override init() {\n    console.log(\"server-node\");\n  }\n}\n", "import { Type } from \"@sinclair/typebox\";\nimport { AnySchemaObject } from \"ajv\";\nimport camelCase from \"camelcase\";\nimport { merge } from \"es-toolkit\";\nimport { Request, Response } from \"express\";\nimport { getCredentialsFromSchema } from \"../utils\";\nimport { Node, IONode, ConfigNode } from \"./nodes\";\nimport { validatorService } from \"./validator\";\n\n// TODO: define RED type\n/**\n * Registers a custom node built with the nrg framework\n * @static\n * @async\n * @param {object} RED - The Node-RED runtime API object\n * @param {(Node | IONode | ConfigNode )} NodeClass - A node class extending Node or ConfigNode\n * @returns {Promise<void>} A promise that resolves when the node type registration and setup are complete. It might wait for the `NodeClass.init()` promise if one is returned.\n * @throws {Error} If NodeClass does not extend `Node`\n * @throws {Error} If type is note defined\n */\nexport async function registerType(\n  RED: any,\n  type: string,\n  NodeClass:\n    | typeof Node\n    | typeof ConfigNode<any, any>\n    | typeof IONode<any, any, any, any>\n) {\n  if (!(NodeClass.prototype instanceof Node)) {\n    throw new Error(\n      `${NodeClass.name} must extend IONode or ConfigNode classes`\n    );\n  }\n\n  if (!type) {\n    throw new Error(`type must be provided when registering the node`);\n  }\n\n  // TODO: move this somewhere else\n  if (Node.RED === undefined) {\n    Object.defineProperty(Node, \"RED\", {\n      value: RED,\n      writable: false,\n      configurable: false,\n      enumerable: false,\n    });\n  }\n\n  // TODO: move this somewhere else\n  if (IONode.RED === undefined) {\n    Object.defineProperty(IONode, \"RED\", {\n      value: RED,\n      writable: false,\n      configurable: false,\n      enumerable: false,\n    });\n  }\n\n  // TODO: move this somewhere else\n  if (ConfigNode.RED === undefined) {\n    Object.defineProperty(ConfigNode, \"RED\", {\n      value: RED,\n      writable: false,\n      configurable: false,\n      enumerable: false,\n    });\n  }\n\n  if (NodeClass.RED === undefined) {\n    Object.defineProperty(NodeClass, \"RED\", {\n      value: RED,\n      writable: false,\n      configurable: false,\n      enumerable: false,\n    });\n  }\n\n  if (NodeClass.type === undefined) {\n    Object.defineProperty(NodeClass, \"type\", {\n      value: type,\n      writable: false,\n      configurable: false,\n      enumerable: false,\n    });\n  }\n\n  console.log(\"NodeClass\");\n  console.log(NodeClass);\n  if (typeof NodeClass.init === \"function\") {\n    const result = NodeClass.init();\n\n    if (result instanceof Promise) {\n      await result;\n    }\n  }\n\n  RED.nodes.registerType(type, NodeClass, {\n    credentials: NodeClass.validations.credentials\n      ? getCredentialsFromSchema(NodeClass.validations.credentials)\n      : {},\n  });\n\n  RED.httpAdmin.get(`/nrg/nodes/${type}`, (req: Request, res: Response) => {\n    if (NodeClass.validations) {\n      const validationConfig = NodeClass.validations;\n\n      const configsProperties = validationConfig.configs.properties\n        ? validationConfig.configs.properties\n        : {};\n\n      const credentialsProperties = validationConfig.credentials?.properties\n        ? validationConfig.credentials.properties\n        : {};\n\n      const nodeProperties = {\n        schema: Type.Object({\n          ...configsProperties,\n          credentials: Type.Object({\n            ...credentialsProperties,\n          }),\n        }),\n      };\n\n      res.json(nodeProperties);\n    } else {\n      res.json({\n        message:\n          \"Node was not configured with schemas to validate configs and credentials\",\n      });\n    }\n  });\n}\n", "import { AnySchemaObject } from \"ajv\";\nimport { Type } from \"@sinclair/typebox\";\n\nfunction getDefaultsFromSchema(\n  schema: AnySchemaObject\n): Record<string, { type?: string; required: boolean; value: any }> {\n  const result: Record<\n    string,\n    { type?: string; required: boolean; value: any }\n  > = {};\n\n  console.log(\"getDefaultsFromSchema\");\n  for (const [key, value] of Object.entries(schema.properties)) {\n    // NOTE: these are excluded from defaults because they must be set by the editor\n    if ([\"x\", \"y\", \"z\", \"g\", \"wires\", \"type\", \"id\"].includes(key)) continue;\n    const property = value as { default?: any; nodeType?: string };\n    console.log(key);\n    console.log(property);\n\n    result[key] = {\n      // NOTE: required is defined by the JSON Schema\n      required: false,\n      value: property.default ?? undefined,\n      // NOTE: I'm using a custom json schema keyword to determine the node type\n      type: property.nodeType,\n    };\n  }\n\n  return result;\n}\n\nfunction getCredentialsFromSchema(\n  schema: AnySchemaObject\n): Record<string, { type: string; required: boolean; value: any }> {\n  const result: Record<\n    string,\n    { type: string; required: boolean; value: any }\n  > = {};\n\n  for (const [key, value] of Object.entries(schema.properties)) {\n    const property = value as {\n      default?: any;\n      format: string;\n      nodeType?: string;\n    };\n    console.log(property);\n    const isPassword = property.format === \"password\";\n    result[key] = {\n      // NOTE: required is defined by the JSON Schema\n      required: false,\n      type: isPassword ? \"password\" : \"text\",\n      value: property.default ?? undefined,\n    };\n  }\n\n  return result;\n}\n\nexport { getDefaultsFromSchema, getCredentialsFromSchema };\n", "// NOTE: this module is optional and it is generated by nrg when server.build.entryPoint isn't provided. Use this if you need to control the order nodes are registered in the server.\nimport YourNode from \"./nodes/your-node/server\";\nimport RemoteServerConfigNode from \"./nodes/remote-server/server\";\nimport { registerType } from \"./core/server\";\n\n// NOTE: this root module can be used to manually control the order nodes are registered\n// TODO: define RED type\nexport default async function (RED: any) {\n  try {\n    // TODO: the order nodes are registered will be defined in nrg.config.ts. If not provided, it will be registered alphabetically based on the folder names\n    // TODO: investigate if it is possible to run Khan's algorithm to determine the registration order\n    await registerType(RED, \"remote-server\", RemoteServerConfigNode);\n    await registerType(RED, \"your-node\", YourNode);\n\n    // TODO: add the order in the message\n    console.log(\"All node types registered in series\");\n  } catch (error) {\n    console.error(\"Error registering node types:\", error);\n  }\n}\n"],
  "mappings": "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",
  "names": ["Ajv", "addFormats", "addErrors", "import_typebox", "import_typebox", "import_typebox", "import_typebox", "import_typebox", "import_typebox", "ConfigsSchema", "ConfigsSchema", "import_typebox"]
}
